//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ExerciseType {
  TRANSLATION
  FILL_IN_BLANKS
  LISTENING
}

/// Post model
model Post {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  title     String
  content   String
  published Boolean  @default(false)
}

/// User model
model User {
  id            String    @id()
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id()
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id()
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()

  @@map("account")
}

model Verification {
  id         String   @id()
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()

  @@map("verification")
}

model Lesson {
  id          String     @id() @default(cuid())
  title       String
  description String?
  difficulty  Difficulty
  section     String
  exercises   Exercise[]
}

model Exercise {
  id          String       @id() @default(cuid())
  type        ExerciseType
  question    String
  answer      String
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id])
  userAnswers UserAnswer[]
}

model UserAnswer {
  id         String   @id() @default(cuid())
  content    String
  correct    Boolean
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model Progress {
  id                 String @id() @default(cuid())
  lessonsCompleted   Int    @default(0)
  exercisesCompleted Int    @default(0)
  score              Int    @default(0)
}
